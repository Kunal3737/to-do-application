{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["axios","require","default","App","useState","inputValue","setInputValue","updateValue","setUpdateValue","allData","setAllData","update","setUpdate","editingModalInput","setEditingModalInput","currentId","setCurrentId","useEffect","get","then","response","fetchedResult","key","data","push","id","catch","error","console","log","customStyles","content","top","left","right","bottom","marginRight","transform","height","width","backfroundColor","className","onSubmit","e","preventDefault","post","addButtonHandler","type","placeholder","required","value","onChange","target","inputHandler","map","items","onClick","icon","faEdit","delete","faTrash","style","isOpen","dat","put","editNote","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.cc755c60.chunk.js","sourcesContent":["import React from \"react\";\nimport { useState, useEffect } from \"react\";\n// import Axios from \"axios\";\nimport \"./App.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport Modal from \"react-modal\";\nconst axios = require(\"axios\").default;\n\nfunction App() {\n  const [inputValue, setInputValue] = useState(\"\");\n  const [updateValue, setUpdateValue] = useState(false);\n  const [allData, setAllData] = useState([]);\n  const [update, setUpdate] = useState(false);\n  const [editingModalInput, setEditingModalInput] = useState();\n  const [currentId, setCurrentId] = useState(\"\");\n\n  useEffect(() => {\n    axios\n      .get(`https://to-do-application-348bd.firebaseio.com/.json`)\n      .then((response) => {\n        const fetchedResult = [];\n        for (let key in response.data) {\n          fetchedResult.push({\n            ...response.data[key],\n            id: key,\n          });\n        }\n        setAllData(fetchedResult);\n        setUpdateValue(false);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  useEffect(() => {\n    axios\n      .get(`https://to-do-application-348bd.firebaseio.com/.json`)\n      .then((response) => {\n        const fetchedResult = [];\n        for (let key in response.data) {\n          fetchedResult.push({\n            ...response.data[key],\n            id: key,\n          });\n        }\n        setAllData(fetchedResult);\n        setUpdateValue(false);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, [updateValue]);\n\n  const addButtonHandler = (e) => {\n    e.preventDefault();\n    const data = inputValue;\n    axios\n      .post(`https://to-do-application-348bd.firebaseio.com/.json`, { data })\n      .then((response) => {\n        setUpdateValue(true);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const inputHandler = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const editHandler = (e, id, data) => {\n    setUpdate(true);\n    setEditingModalInput(data);\n    setCurrentId(id);\n  };\n\n  const deleteHandler = (e, id) => {\n    axios\n      .delete(`https://to-do-application-348bd.firebaseio.com/${id}.json`)\n      .then((response) => {\n        setUpdateValue(true);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const editNote = (e, id, data) => {\n    if (editingModalInput !== \"\") {\n      const dat = data;\n      axios\n        .put(\n          `https://to-do-application-348bd.firebaseio.com/${currentId}/.json`,\n          { data: dat }\n        )\n        .then((response) => {\n          setUpdateValue(true);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      setUpdate(false);\n    }\n  };\n  const customStyles = {\n    content: {\n      top: \"50%\",\n      left: \"50%\",\n      right: \"auto\",\n      bottom: \"auto\",\n      marginRight: \"-50%\",\n      transform: \"translate(-50%, -50%)\",\n      height: \"400px\",\n      width: \"500px\",\n      backfroundColor: \"#ccc\",\n    },\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">To-Do-Application</div>\n      <form onSubmit={(e) => addButtonHandler(e)}>\n        <input\n          type=\"text\"\n          placeholder=\"Add Items\"\n          required\n          value={inputValue}\n          onChange={(e) => inputHandler(e)}\n        />\n        <button type=\"submit\" className=\"addButton\">\n          Add\n        </button>\n      </form>\n      {allData &&\n        allData.map((items) => (\n          <div key={items.id} className=\"content\">\n            <div className=\"addedContent\">{items.data}</div>\n            <div className=\"addedContent\">\n              <button\n                className=\"adddelButton\"\n                onClick={(e) => {\n                  editHandler(e, items.id, items.data);\n                }}\n              >\n                <FontAwesomeIcon icon={faEdit} />\n              </button>\n              &nbsp;\n              <button\n                className=\"adddelButton\"\n                onClick={(e) => {\n                  deleteHandler(e, items.id);\n                }}\n              >\n                <FontAwesomeIcon icon={faTrash} />\n              </button>\n            </div>\n          </div>\n        ))}\n      {allData &&\n        allData.map((items) => (\n          <Modal style={customStyles} isOpen={update}>\n            <input\n              className=\"inputModal\"\n              value={editingModalInput}\n              onChange={(e) => {\n                setEditingModalInput(e.target.value);\n              }}\n            />\n            <br />\n            <br />\n            <button\n              className=\"addModal\"\n              onClick={(e) => editNote(e, items.id, editingModalInput)}\n            >\n              Add\n            </button>\n            &nbsp;\n            <button\n              className=\"closeModal\"\n              onClick={() => {\n                setUpdate(false);\n              }}\n            >\n              Close\n            </button>\n          </Modal>\n        ))}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}